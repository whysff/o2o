<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置整合mybatis过程 -->
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
<!--    <context:property-placeholder location="classpath:druid.properties"/>关键信息加密后需要替换-->
    <bean class="io.whysff.o2o.util.EncryptPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:druid.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8" />
    </bean>

    <!-- 2.配置数据库连接池(选用druid) -->
    <bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">

        <!--配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driverClass}" />
        <property name="username" value="${jdbc.userName}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="${jdbc.validationQuery}" />

        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用,但会影响性能 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />

        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 。 -->
        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 开启web监控、开启sql防火墙 -->
<!--        <property name="filters" value="${jdbc.filters}" />-->

<!--        <property name="proxyFilters">-->
<!--            <list>-->
<!--                <ref bean="logFilter" />-->
<!--                <ref bean="statFilter" />-->
<!--            </list>-->
<!--        </property>-->
    </bean>

    <bean id="master" parent="abstractDataSource">
        <property name="url" value="${jdbc.master.url}" />
    </bean>

    <bean id="slave" parent="abstractDataSource">
        <property name="url" value="${jdbc.slave.url}" />
    </bean>

    <!-- 配置动态数据源 -->
    <bean id="dynamicDataSource" class="io.whysff.o2o.dao.split.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry value-ref="master" key="master"></entry>
                <entry value-ref="slave" key="slave"></entry>
            </map>
        </property>
    </bean>
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource">
            <ref bean="dynamicDataSource"/>
        </property>
    </bean>

<!--    &lt;!&ndash; 慢SQL记录 &ndash;&gt;-->
<!--    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">-->
<!--        &lt;!&ndash; 慢sql时间设置,即执行时间大于200毫秒的都是慢sql &ndash;&gt;-->
<!--        <property name="slowSqlMillis" value="5" />-->
<!--        <property name="logSlowSql" value="true" />-->
<!--    </bean>-->

<!--    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">-->
<!--        <property name="statementExecutableSqlLogEnable" value="false" />-->
<!--    </bean>-->


    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="io.whysff.o2o.entity" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="io.whysff.o2o.dao" />
    </bean>
</beans>